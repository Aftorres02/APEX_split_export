{
    "id": "35843219259881136",
    "Identification": {
        "Name": "Create Collections",
        "Type": "Execute Code",
        "Execution Chain": "None"
    },
    "Source": {
        "Location": "Local Database",
        "Language": "PL/SQL",
        "PL/SQL Code": "declare\n    l_line      varchar2(32767);\n    l_emails    apex_t_varchar2;\n    l_username  varchar2(4000);\n    l_at        number;\n    l_dot       number;\n    l_valid     boolean := true;\n    l_domain    varchar2(4000);\nbegin\n    -- create collections\n    apex_collection.create_or_truncate_collection('ACL_BULK_USER_INVALID');\n    apex_collection.create_or_truncate_collection('ACL_BULK_USER_VALID');\n\n    -- replace delimiting characters with commas\n    l_line := :P10043_PRELIM_USERS;\n    l_line := replace(l_line, chr(10), ' ');\n    l_line := replace(l_line, chr(13), ' ');\n    l_line := replace(l_line, chr(9),  ' ');\n    l_line := replace(l_line, '<', ' ');\n    l_line := replace(l_line, '>', ' ');\n    l_line := replace(l_line, ';', ' ');\n    l_line := replace(l_line, ':', ' ');\n    l_line := replace(l_line, '(', ' ');\n    l_line := replace(l_line, ')', ' ');\n    l_line := replace(l_line, ' ', ',');\n\n    -- get one comma separated line of emails\n    for j in 1 .. 1000 loop\n        if instr(l_line, ',,') > 0 then\n            l_line := replace(l_line, ',,', ',');\n        else\n            exit;\n        end if;\n    end loop;\n\n    -- get an array of emails\n    l_emails := apex_string.split(l_line, ',');\n\n    -- add emails to a collection\n    l_username := null;\n    l_domain   := null;\n    l_at       := 0;\n    l_dot      := 0;\n    for j in 1..l_emails.count loop\n        l_valid    := true;\n        l_username := upper(trim(l_emails(j)));\n        l_username := trim(both '.' from l_username);\n        l_username := replace(l_username, ' ', null);\n        l_username := replace(l_username, chr(10), null);\n        l_username := replace(l_username, chr(9), null);\n        l_username := replace(l_username, chr(13), null);\n        l_username := replace(l_username, chr(49824), null);\n\n        if l_username is not null then\n            if nvl(:P10043_USERNAME_FORMAT,'x') = 'EMAIL' then\n              -- Validate\n              l_at     := instr(nvl(l_username, 'x'), '@');\n              l_domain := substr(l_username, l_at+1);\n              l_dot    := instr(l_domain, '.');\n              if l_at < 2 then\n                  -- invalid email\n                  apex_collection.add_member(\n                      p_collection_name => 'ACL_BULK_USER_INVALID',\n                      p_c001            => l_username,\n                      p_c002            => apex_lang.message('APEX.FEATURE.ACL.BULK_USER.MISSING_AT_SIGN'));\n                  commit;\n                  l_valid := false;\n              end if;\n\n              if l_dot = 0 and l_valid then\n                  apex_collection.add_member(\n                      p_collection_name => 'ACL_BULK_USER_INVALID',\n                      p_c001            => l_username,\n                      p_c002            => apex_lang.message('APEX.FEATURE.ACL.BULK_USER.MISSING_DOT'));\n                  commit;\n                  l_valid := false;\n              end if;\n            end if;\n\n            if l_valid and length(l_username) > 255 then\n                apex_collection.add_member(\n                    p_collection_name => 'ACL_BULK_USER_INVALID',\n                    p_c001            => l_username,\n                    p_c002            => apex_lang.message('APEX.FEATURE.ACL.BULK_USER.USERNAME_TOO_LONG'));\n                commit;\n                l_valid := false;\n            end if;\n\n            if l_valid then\n                for c1 in (select user_name username\n                             from APEX_APPL_ACL_USERS\n                            where user_name = l_username and application_id = :APP_ID)\n                loop\n                    apex_collection.add_member(\n                        p_collection_name => 'ACL_BULK_USER_INVALID',\n                        p_c001            => l_username,\n                        p_c002            => apex_lang.message('APEX.FEATURE.ACL.BULK_USER.ALREADY_IN_ACL'));\n                    commit;\n                    l_valid := false;\n                    exit;\n                end loop;\n            end if;\n\n            if l_valid then\n                for c1 in (select c001\n                             from apex_collections\n                            where collection_name = 'ACL_BULK_USER_VALID'\n                              and c001            = l_username)\n                loop\n                    apex_collection.add_member(\n                        p_collection_name => 'ACL_BULK_USER_INVALID',\n                        p_c001            => l_username,\n                        p_c002            => apex_lang.message('APEX.FEATURE.ACL.BULK_USER.DUPLICATE_USER'));\n                        commit;\n                    l_valid := false;\n                    exit;\n                end loop;\n            end if;\n\n            if l_valid then\n                apex_collection.add_member(\n                    p_collection_name => 'ACL_BULK_USER_VALID',\n                    p_c001            => l_username,\n                    p_c002            => null,\n                    p_c003            => :P10043_ROLE);\n                    commit;\n            end if;\n\n        end if;\n        l_username := null;\n    end loop;\nend;"
    },
    "Execution": {
        "Sequence": 10,
        "Point": "Processing",
        "Run Process": "Once Per Page Visit (default)"
    },
    "Error": {
        "Display Location": "Inline in Notification"
    },
    "Server-side Condition": {
        "When Button Pressed": "NEXT (35837674882881132)"
    }
}